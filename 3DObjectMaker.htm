<html>
	<head>
		<title>3D Object Maker</title>
		<link rel="stylesheet" type="text/css" href="3DObjectMaker.css">
	</head>
	<body>
		<div class="menubar">
			<div class="menubar_holder">
				<div class="menubar_button_new_enabled" id="buttonNew" onclick="newProject();"></div>
			</div>
			<div class="menubar_holder">
				<label for="fileOpener" id="buttonImport">
					<div class="menubar_button_open_enabled"></div>
				</label>
				<input type="file" class="menubar_buttonHidden" id="fileOpener" onChange="addModel(document.getElementById('fileOpener').files[0]);">
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_exportstl_enabled" id="buttonExportSTL" onclick="exportToSTL();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_exportscene_enabled" id="buttonExportScene" onclick="exportToScene();"></div>
			</div>
			<div class="menubar_separator"></div>
			<div class="menubar_holder">
				<div class="menubar_button_move_disabled" id="buttonMove" onclick="changeControlTypeMove();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_scale_disabled" id="buttonScale" onclick="changeControlTypeScale();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_rotate_disabled" id="buttonRotate" onclick="changeControlTypeRotate();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_copy_disabled" id="buttonDuplicate" onclick="duplicateObject();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_trash_disabled" id="buttonDelete" onclick="deleteObject();"></div>
			</div>
		</div>
		<div class="content1" id="container"></div>
		<div class="content2">
			<div class="models_container1">
				<div class="models_container2">
					<div class="models_cube" onclick="addShape(MODEL_CUBE);"></div>
					<div class="models_cylinder" onclick="addShape(MODEL_CYLINDER);"></div>
					<div class="models_cone" onclick="addShape(MODEL_CONE);"></div>
					<div class="models_pyramid" onclick="addShape(MODEL_PYRAMID);"></div>
					<div class="models_sphere" onclick="addShape(MODEL_SPHERE);"></div>
					<div class="models_halfsphere" onclick="addShape(MODEL_HALFSPHERE);"></div>
					<div class="models_tube" onclick="addShape(MODEL_TUBE);"></div>
					<div class="models_roof1" onclick="addShape(MODEL_ROOF1);"></div>
					<div class="models_roof2" onclick="addShape(MODEL_ROOF2);"></div>
					<div class="models_hexagon" onclick="addShape(MODEL_HEXAGON);"></div>
					<div class="models_wedge" onclick="addShape(MODEL_WEDGE);"></div>
					<div class="models_paraboloide" onclick="addShape(MODEL_PARABOLOIDE);"></div>
				</div>
			</div>

			<div class="panel_fieldseparator"><hr class="panel_hr"></div>

			<div class="panel_field1b">
				<div class="panel_field2"><span id="labelGrid"></span></div>
				<div class="panel_field3">
					<select class="panel_selectbox" id="gridSize" onchange="changeGridSize(document.getElementById('gridSize').value)">
						<option value="10">10 cm&sup2;</option>
						<option selected value="20">20 cm&sup2;</option>
						<option value="30">30 cm&sup2;</option>
						<option value="40">40 cm&sup2;</option>
						<option value="50">50 cm&sup2;</option>
					</select>
				</div>
			</div>

			<div class="panel_fieldseparator"><hr class="panel_hr"></div>

			<div class="panel_field1b">
				<div class="panel_field2"><span id="labelMaterial"></span></div>
				<div class="panel_field3">
					<select class="panel_selectbox" id="materialColor" onchange="changeObjectColor()" disabled>
						<option class="panel_selectbox_option_hollow" id="labelHollow" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_silver" id="labelSilver" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_gray" id="labelGray" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_aqua" id="labelAqua" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_blue" id="labelBlue" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_navyblue" id="labelNavyBlue" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_fuchsia" id="labelFuchsia" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_green" id="labelGreen" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_teal" id="labelTeal" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_lightgreen" id="labelLightGreen" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_lime" id="labelLime" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_brown" id="labelBrown" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_olive" id="labelOlive" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_purple" id="labelPurple" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_violet" id="labelViolet" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_red" id="labelRed" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_yellow" id="labelYellow" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_gold" id="labelGold" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_orange" id="labelOrange" value="0">&nbsp;</option>
						<option class="panel_selectbox_option_pink" id="labelPink" value="0">&nbsp;</option>
					</select>
				</div>
			</div>

			<div class="panel_fieldseparator"><hr class="panel_hr"></div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelWidth"></span></div>
				<div class="panel_field3"><input type="text" id="objectWidth" onkeydown="return changeObjectWidth(event)" class="panel_textbox" disabled><input type="hidden" id="objectWidthCommaResidualData"></div>
			</div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelHeight"></span></div>
				<div class="panel_field3"><input type="text" id="objectHeight" onkeydown="return changeObjectHeight(event)" class="panel_textbox" disabled><input type="hidden" id="objectHeightCommaResidualData"></div>
			</div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelDepth"></span></div>
				<div class="panel_field3"><input type="text" id="objectDepth" onkeydown="return changeObjectDepth(event)" class="panel_textbox" disabled><input type="hidden" id="objectDepthCommaResidualData"></div>
			</div>

			<div class="panel_field4">
				<input type="checkbox" class="panel_checkbox" id="objectProportional" onclick="checkProportional();" disabled><label class="panel_checkboxtext_disabled" id="objectProportionalLabel" onclick="document.getElementById('objectProportional').click();"></label>
			</div>

			<div class="panel_field5">
				<input type="submit" class="panel_button" id="resetScale" onclick="resetObjectScale();" value="" disabled>
			</div>

			<div class="panel_fieldseparator"><hr class="panel_hr"></div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelPositionX"></span></div>
				<div class="panel_field3"><input type="text" id="objectPositionX" onkeydown="return changeObjectPositionX(event)" class="panel_textbox" disabled></div>
			</div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelPositionY"></span></div>
				<div class="panel_field3"><input type="text" id="objectPositionY" onkeydown="return changeObjectPositionY(event)" class="panel_textbox" disabled></div>
			</div>

			<div class="panel_field1b">
				<div class="panel_field2"><span id="labelPositionZ"></span></div>
				<div class="panel_field3"><input type="text" id="objectPositionZ" onkeydown="return changeObjectPositionZ(event)" class="panel_textbox" disabled></div>
			</div>

			<div class="panel_fieldseparator"><hr class="panel_hr"></div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelRotationX"></span></div>
				<div class="panel_field3"><input type="text" id="objectRotationX" onkeydown="return changeObjectRotationX(event)" class="panel_textbox" disabled></div>
			</div>

			<div class="panel_field1">
				<div class="panel_field2"><span id="labelRotationY"></span></div>
				<div class="panel_field3"><input type="text" id="objectRotationY" onkeydown="return changeObjectRotationY(event)" class="panel_textbox" disabled></div>
			</div>

			<div class="panel_field1b">
				<div class="panel_field2"><span id="labelRotationZ"></span></div>
				<div class="panel_field3"><input type="text" id="objectRotationZ" onkeydown="return changeObjectRotationZ(event)" class="panel_textbox" disabled></div>
			</div>

		</div>
		<div id="loading" class="loading_splash"></div>

		<script src="3DObjectMaker.js"></script>
		<script>
			var TYPE_MOVE = 1;
			var TYPE_SCALE = 2;
			var TYPE_ROTATE = 3;
			var TYPE_CONTROL;
			var container, camera, scene, renderer, controls, controls2, raycaster, mouse, light, lightFocus, printer, plane;

			var extensionFinal;
			var gridSizeValue = 20;

			var objects = [];
			var selectedObject;

			function init()
				{
				initLanguage();

				objects = [];

				objectPropertiesPanelEnabled(false);

				document.getElementById("gridSize").value = 20;
				gridSizeValue = 20;

				TYPE_CONTROL = TYPE_MOVE;

				document.getElementById("buttonMove").classList.add("menubar_button_move_disabled");
				document.getElementById("buttonMove").classList.remove("menubar_button_move_enabled");

				document.getElementById("buttonScale").classList.add("menubar_button_scale_disabled");
				document.getElementById("buttonScale").classList.remove("menubar_button_scale_enabled");

				document.getElementById("buttonRotate").classList.add("menubar_button_rotate_disabled");
				document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_enabled");

				container = document.getElementById("container");
				container.innerHTML= "";

				camera = new THREE.PerspectiveCamera(37.8,container.offsetWidth/container.offsetHeight,1,100000);
				camera.up = new THREE.Vector3(0,0,1);
				camera.position.set(0, -325, 170);

				renderer = new THREE.WebGLRenderer({antialias:true, alpha:true});
				renderer.setSize(container.offsetWidth,container.offsetHeight);

				renderer.setClearColor(0x000000, 0.0);

				container.appendChild(renderer.domElement);

				addScene();
				addLight();
				addLightFocus(gridSizeValue);
				addPrinter();
				addWirePlane(gridSizeValue,0);
				addRaycaster();
				addMouse();
				addControls();

				requestAnimationFrame(animate);

				document.getElementById("container").addEventListener("mousedown",onDocumentMouseDown,false);
				document.getElementById("container").addEventListener("touchstart",onDocumentMouseDown,false); 
				window.addEventListener("resize",onWindowResize,false);
				}

			function addModel(file)
				{
				var filename = file.name;
				var extension = filename.split(".").pop().toLowerCase();
				extensionFinal = extension;
				var reader = new FileReader();

				// SHOWING THE LOADING SPLASH
				document.getElementById("loading").style.display = "block";

				if (extension=="stl")
					{
					reader.readAsArrayBuffer(file);
					}
				else if (extension=="3ds")
					{
					reader.readAsArrayBuffer(file);
					}
				else if (extension=="obj")
					{
					reader.readAsText(file);
					}
				else if (extension=="scene")
					{
					reader.readAsText(file);
					}
					else
					{
					// HIDDING THE LOADING SPLASH
					document.getElementById("loading").style.display = "none";

					document.getElementById("fileOpener").value = null;
					alert(STRING_ERROR_MODEL);
					}

				reader.addEventListener("load", function (event)
					{
					document.getElementById("fileOpener").value = null;
					try
						{
						var contents = event.target.result;
						if (extension=="scene")
							{
							// LOADING THE SIZE OF THE GRID
							var limitGrid = contents.indexOf("|");
							var gridSizeData = contents.substring(0, limitGrid);
							changeEnvironment(parseFloat(gridSizeData));
							gridSizeValue = parseFloat(gridSizeData);
							document.getElementById("gridSize").value = parseFloat(gridSizeData);

							// LOADING EVERY MODEL STORED IN THE FILE
							var models = contents.substring(limitGrid + 1, contents.length)
							models = models.split("3D_OBJECT_MAKER_SEPARATOR");
							for (var i = 0; i < models.length - 1; i++)
								{
								// GETTING THE LOCATION OF THE MODEL
								var limit = models[i].indexOf("|");
								var objectData = models[i].substring(0, limit);
								var objectDataValues = objectData.split(",");

								// GETTING THE MODEL DATA
								var modelData = models[i].substring(limit+1, models[i].length);

								// CREATING THE MODEL
								var geometry = loadObjectGeometry(extension,modelData);
								var material = loadObjectMaterial();
								var mesh = new THREE.Mesh(geometry, material);

								// SETTING THE COLOR OF THE MODEL
								var colorModelImported = "0x" + objectDataValues[0];
								mesh.material.color.setHex(colorModelImported);
								if (objectDataValues[0]=="000000")
									{
									mesh.material.transparent = true;
									mesh.material.opacity = 0.5;
									mesh.material.needsUpdate = true;
									}
									else
									{
									mesh.material.transparent = false;
									mesh.material.opacity = 1;
									mesh.material.needsUpdate = true;
									}

								// SETTING THE SIZE OF THE MODEL
								mesh.scale.x = 1;
								mesh.scale.y = 1;
								mesh.scale.z = 1;
								var box = new THREE.Box3().setFromObject(mesh);
								var height = box.max.z - box.min.z;
								var width = box.max.x - box.min.x;
								var depth = box.max.y - box.min.y;
								var storedWidth = parseFloat(objectDataValues[1]);
								var storedHeight = parseFloat(objectDataValues[2]);
								var storedDepth = parseFloat(objectDataValues[3]);
								mesh.scale.x = storedWidth * 1 / width;
								mesh.scale.z = storedHeight * 1 / height;
								mesh.scale.y = storedDepth * 1 / depth;

								// SETTING THE ROTATION OF THE MODEL
								mesh.applyMatrix(new THREE.Matrix4().makeRotationX(objectDataValues[7]));
								mesh.applyMatrix(new THREE.Matrix4().makeRotationY(objectDataValues[8]));
								mesh.applyMatrix(new THREE.Matrix4().makeRotationZ(objectDataValues[9]));

								// SETTING THE POSITION OF THE MODEL
								mesh.position.x = parseFloat(objectDataValues[4]);
								mesh.position.y = parseFloat(objectDataValues[5]);
								mesh.position.z = parseFloat(objectDataValues[6]);

								// ADDING THE MODEL TO SCENE
								scene.add(mesh);
								objects.push(mesh);
								}
							}
							else
							{
							// CREATING THE MODEL
							var geometry = loadObjectGeometry(extension,contents);
							var material = loadObjectMaterial();
							var mesh = new THREE.Mesh(geometry, material);
							var box = new THREE.Box3().setFromObject(mesh);

							// SETTING THE POSITION OF THE MODEL
							var height = box.max.z - box.min.z;
							mesh.position.x = 0;
							mesh.position.y = 0;
							mesh.position.z = height / 2;

							// SETTING THE SCALE OF THE MODEL
							mesh.scale.x = 1;
							mesh.scale.y = 1;
							mesh.scale.z = 1;

							// SETTING THE COLOR OF THE MODEL
							mesh.material.color.setHex(0xffffff);

							// ADDING THE MODEL TO THE SCENE
							scene.add(mesh);
							objects.push(mesh);

							// ATTACHING THE DRAGGING CONTROL TO THE SELECTED OBJECT
							controls2.addEventListener("change",function ()
								{
								updateTextBoxs();
								});

							// SELECTING THE DUPLICATED OBJECT
							selectedObject = mesh;
							controls2.attach(selectedObject);
							controls2.update();
							controls2.visible = true;

							// ENABLING ALL THE TEXTBOXS
							objectPropertiesPanelEnabled(true);

							// UPDATING THE TEXTBOXS VALUES
							updateTextBoxs();

							// UPDATING THE COLOR FIELD
							updateColorField();

							// UPDATING THE PROPORTIONAL VALUE
							updateProportional();
							}

						// HIDDING THE LOADING SPLASH
						document.getElementById("loading").style.display = "none";
						}
						catch(err)
						{
						// HIDDING THE LOADING SPLASH
						document.getElementById("loading").style.display = "none";

						alert(STRING_ERROR_MODEL);
						}
					}, false);
				}

			function animate()
				{
				requestAnimationFrame(animate);
				light.position.copy(camera.getWorldPosition());
				renderer.render(scene,camera);
				}

			function onWindowResize()
				{
				camera.aspect = container.offsetWidth / container.offsetHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(container.offsetWidth, container.offsetHeight);
				}

			function onDocumentMouseDown(event)
				{
				event.preventDefault();

				// GETTING THE X AND Y VALUES FROM THE MOUSE OR FINGER IN A TOUCHSCREEN
				if (event.clientX==undefined)
					{
					mouse.x = (parseInt(event.changedTouches[0].pageX)/renderer.domElement.clientWidth) * 2 - 1;
					mouse.y = - ((parseInt(event.changedTouches[0].pageY) - 56)/renderer.domElement.clientHeight) * 2 + 1;
					}
					else
					{
					mouse.x = (event.clientX/renderer.domElement.clientWidth) * 2 - 1;
					mouse.y = - ((event.clientY - 56)/renderer.domElement.clientHeight) * 2 + 1;
					}

				// GETTING THE INTERSECTS IN ORDER TO CHECK IF AN OBJECT IS SELECTED
				raycaster.setFromCamera(mouse,camera);
				var intersects = raycaster.intersectObjects(objects);
				
				// CHECKING IF AN OBJECT IS SELECTED
				if (intersects.length>0)
					{
					selectedObject = intersects[0].object;

					// ATTACHING THE DRAGGING CONTROL TO THE SELECTED OBJECT
					controls2.addEventListener("change",function ()
						{
						updateTextBoxs();
						});

					// SETTING VISIBLE THE VISUAL CONTROL
					controls2.attach(selectedObject);
					controls2.update();
					controls2.visible = true;

					// ENABLING ALL THE TEXTBOXS
					objectPropertiesPanelEnabled(true);

					// UPDATING THE TEXTBOXS VALUES
					updateTextBoxs();

					// UPDATING THE COLOR FIELD
					updateColorField();

					// UPDATING THE PROPORTIONAL VALUE
					updateProportional();
					}
					else
					{
					// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
					if (controls2!=null)
						{
						controls2.detach();
						controls2.update();
						controls2.visible = false;
						selectedObject = null;
						}

					// DISABLING ALL THE TEXTBOXS AND BUTTONS
					objectPropertiesPanelEnabled(false);
					}
				}

			function addShape(a)
				{
				// CREATING THE SHAPE
				var geometry = new THREE.STLLoader().parse(a);
				geometry.computeFaceNormals();
				geometry.computeVertexNormals();
				geometry.center();
				var material = loadObjectMaterial();
				var mesh = new THREE.Mesh(geometry, material);

				// SETTING THE POSITION OF THE SHAPE
				var box = new THREE.Box3().setFromObject(mesh);
				var height = box.max.z - box.min.z;
				mesh.position.x = 0;
				mesh.position.y = 0;
				mesh.position.z = height / 2;

				// SETTING THE COLOR OF THE SHAPE
				mesh.material.color.setHex(0xffffff);

				// ADDING THE SHAPE TO SCENE
				scene.add(mesh);
				objects.push(mesh);

				// ATTACHING THE DRAGGING CONTROL TO THE SELECTED OBJECT
				controls2.addEventListener("change",function ()
					{
					updateTextBoxs();
					});

				// SELECTING THE DUPLICATED OBJECT
				selectedObject = mesh;
				controls2.attach(selectedObject);
				controls2.update();
				controls2.visible = true;

				// ENABLING ALL THE TEXTBOXS
				objectPropertiesPanelEnabled(true);

				// UPDATING THE TEXTBOXS VALUES
				updateTextBoxs();

				// UPDATING THE COLOR FIELD
				updateColorField();

				// UPDATING THE PROPORTIONAL VALUE
				updateProportional();
				}

			function changeGridSize(a)
				{
				document.getElementById("gridSize").blur();
				changeEnvironment(a);
				gridSizeValue = a;
				}

			function changeObjectColor()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					var selectedObjectColorIndex = document.getElementById("materialColor").selectedIndex;
					
					if (selectedObjectColorIndex==0) // HOLLOW
						{
						selectedObject.material.color.setHex(0x000000);
						selectedObject.material.transparent = true;
						selectedObject.material.opacity = 0.5;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==1) // SILVER
						{
						selectedObject.material.color.setHex(0xffffff);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==2) // GRAY
						{
						selectedObject.material.color.setHex(0x808080);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==3) // AQUA
						{
						selectedObject.material.color.setHex(0x00ffff);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==4) // BLUE
						{
						selectedObject.material.color.setHex(0x0000ff);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==5) // NAVY BLUE
						{
						selectedObject.material.color.setHex(0x4682b4);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==6) // FUCHSIA
						{
						selectedObject.material.color.setHex(0xff00ff);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==7) // GREEN
						{
						selectedObject.material.color.setHex(0x008000);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==8) // TEAL
						{
						selectedObject.material.color.setHex(0x008080);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==9) // LIGHT GREEN
						{
						selectedObject.material.color.setHex(0x93db70);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==10) // LIME
						{
						selectedObject.material.color.setHex(0x00ff00);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==11) // BROWN
						{
						selectedObject.material.color.setHex(0x8b4513);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==12) // OLIVE
						{
						selectedObject.material.color.setHex(0x808000);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==13) // PURPLE
						{
						selectedObject.material.color.setHex(0x800080);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==14) // VIOLET
						{
						selectedObject.material.color.setHex(0xee82ee);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==15) // RED
						{
						selectedObject.material.color.setHex(0xff0000);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==16) // YELLOW
						{
						selectedObject.material.color.setHex(0xffff00);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==17) // GOLD
						{
						selectedObject.material.color.setHex(0xffd700);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==18) // ORANGE
						{
						selectedObject.material.color.setHex(0xffa500);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					else if (selectedObjectColorIndex==19) // PINK
						{
						selectedObject.material.color.setHex(0xffc0cb);
						selectedObject.material.transparent = false;
						selectedObject.material.opacity = 1;
						selectedObject.material.needsUpdate = true;
						}
					}
				}

			function changeObjectWidth(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectWidth").value;

						// GETTING THE ORIGINAL ROTATION OF THE OBJECT
						var originalRotationX = selectedObject.rotation.x;
						var originalRotationY = selectedObject.rotation.y;
						var originalRotationZ = selectedObject.rotation.z;

						// SETTING THE OBJECT ROTATION TO 0
						selectedObject.rotation.x = 0;
						selectedObject.rotation.y = 0;
						selectedObject.rotation.z = 0;

						// GETTING THE OBJECT WIDTH AND HEIGHT
						var box = new THREE.Box3().setFromObject(selectedObject);
						var oldWidth = box.max.x - box.min.x;
						var oldHeight = box.max.z - box.min.z;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							if (value>0)
								{
								// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
								value = parseFloat(parseFloat(document.getElementById("objectWidth").value) + parseFloat(document.getElementById("objectWidthCommaResidualData").value));

								// GETTING THE ORIGINAL POSITION
								var originalX = parseFloat(parseFloat(selectedObject.position.x).toFixed(2) - oldWidth / 2);
								var originalZ = parseFloat(parseFloat(selectedObject.position.z).toFixed(2) - oldHeight / 2);

								// RESIZING THE OBJECT
								selectedObject.scale.x = 1;
								var tempBox = new THREE.Box3().setFromObject(selectedObject);
								var tempWidth = tempBox.max.x - tempBox.min.x;
								var newWidth = parseFloat(value);
								var newScale = newWidth * 1 / tempWidth;

								// CHECKING IF PROPORTIONAL SIZE IS ACTIVATED
								if (document.getElementById("objectProportional").checked==true)
									{
									selectedObject.scale.set(newScale,newScale,newScale);

									// RELOCATING THE OBJECT TO THE ORIGINAL Z POSITION IF NO ROTATION
									if (originalRotationX==0 && originalRotationY==0)
										{
										var newBox = new THREE.Box3().setFromObject(selectedObject);
										var newHeight = newBox.max.z - newBox.min.z;
										selectedObject.position.z = parseFloat(parseFloat(newHeight /2 + parseFloat(originalZ)).toFixed(2));
										}
									}
									else
									{
									selectedObject.scale.x = newScale;
									}

								// RELOCATING THE OBJECT TO THE ORIGINAL Z POSITION
								selectedObject.position.x = parseFloat(parseFloat(newWidth /2 + parseFloat(originalX)).toFixed(2));

								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// UPDATING THE VISUAL CONTROL
								controls2.update();

								// UPDATING THE TEXTBOXS VALUES
								updateTextBoxs();
								}
								else
								{
								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// SETTING THE ORIGINAL VALUE
								document.getElementById("objectWidth").value = parseFloat(oldWidth);

								// ERROR MESSAGE
								alert(STRING_ERROR_POSITIVE);
								}
							}
							else
							{
							// SETTING THE ORIGINAL ROTATION TO THE OBJECT
							selectedObject.rotation.x = originalRotationX;
							selectedObject.rotation.y = originalRotationY;
							selectedObject.rotation.z = originalRotationZ;

							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectWidth").value = parseFloat(oldWidth);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectHeight(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectHeight").value;

						// GETTING THE ORIGINAL ROTATION OF THE OBJECT
						var originalRotationX = selectedObject.rotation.x;
						var originalRotationY = selectedObject.rotation.y;
						var originalRotationZ = selectedObject.rotation.z;

						// SETTING THE OBJECT ROTATION TO 0
						selectedObject.rotation.x = 0;
						selectedObject.rotation.y = 0;
						selectedObject.rotation.z = 0;

						// GETTING THE OBJECT HEIGHT
						var box = new THREE.Box3().setFromObject(selectedObject);
						var oldHeight = box.max.z - box.min.z;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							if (value>0)
								{
								// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
								value = parseFloat(parseFloat(document.getElementById("objectHeight").value) + parseFloat(document.getElementById("objectHeightCommaResidualData").value));

								// GETTING THE ORIGINAL POSITION
								var originalZ = parseFloat(parseFloat(selectedObject.position.z).toFixed(2) - oldHeight / 2);

								// RESIZING THE OBJECT
								selectedObject.scale.z = 1;
								var tempBox = new THREE.Box3().setFromObject(selectedObject);
								var tempHeight = tempBox.max.z - tempBox.min.z;
								var newHeight = parseFloat(value);
								var newScale = newHeight * 1 / tempHeight;

								// CHECKING IF PROPORTIONAL SIZE IS ACTIVATED
								if (document.getElementById("objectProportional").checked==true)
									{
									selectedObject.scale.set(newScale,newScale,newScale);
									}
									else
									{
									selectedObject.scale.z = newScale;
									}

								// RELOCATING THE OBJECT TO THE ORIGINAL Z POSITION IF NO ROTATION
								if (originalRotationX==0 && originalRotationY==0)
									{
									selectedObject.position.z = parseFloat(parseFloat(newHeight /2 + parseFloat(originalZ)).toFixed(2)).toFixed(2);
									}

								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// UPDATING THE VISUAL CONTROL
								controls2.update();

								// UPDATING THE TEXTBOXS VALUES
								updateTextBoxs();
								}
								else
								{
								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// SETTING THE ORIGINAL VALUE
								document.getElementById("objectHeight").value = parseFloat(oldHeight);

								// ERROR MESSAGE
								alert(STRING_ERROR_POSITIVE);
								}
							}
							else
							{
							// SETTING THE ORIGINAL ROTATION TO THE OBJECT
							selectedObject.rotation.x = originalRotationX;
							selectedObject.rotation.y = originalRotationY;
							selectedObject.rotation.z = originalRotationZ;

							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectHeight").value = parseFloat(oldHeight);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectDepth(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectDepth").value;

						// GETTING THE ORIGINAL ROTATION OF THE OBJECT
						var originalRotationX = selectedObject.rotation.x;
						var originalRotationY = selectedObject.rotation.y;
						var originalRotationZ = selectedObject.rotation.z;

						// SETTING THE OBJECT ROTATION TO 0
						selectedObject.rotation.x = 0;
						selectedObject.rotation.y = 0;
						selectedObject.rotation.z = 0;

						// GETTING THE OBJECT DEPTH
						var box = new THREE.Box3().setFromObject(selectedObject);
						var oldDepth = box.max.y - box.min.y;
						var oldHeight = box.max.z - box.min.z;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							if (value>0)
								{
								// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
								value = parseFloat(parseFloat(document.getElementById("objectDepth").value) + parseFloat(document.getElementById("objectDepthCommaResidualData").value));

								// GETTING THE ORIGINAL POSITION
								var originalY = parseFloat(parseFloat(selectedObject.position.y).toFixed(2) - oldDepth / 2);
								var originalZ = parseFloat(parseFloat(selectedObject.position.z).toFixed(2) - oldHeight / 2);

								// SCALING THE OBJECT
								selectedObject.scale.y = 1;
								var tempBox = new THREE.Box3().setFromObject(selectedObject);
								var tempDepth = tempBox.max.y - tempBox.min.y;
								var newDepth = parseFloat(value);
								var newScale = newDepth * 1 / tempDepth;

								// CHECKING IF PROPORTIONAL SIZE IS ACTIVATED
								if (document.getElementById("objectProportional").checked==true)
									{
									selectedObject.scale.set(newScale,newScale,newScale);

									// RELOCATING THE OBJECT TO THE ORIGINAL Z POSITION IF NO ROTATION
									if (originalRotationX==0 && originalRotationY==0)
										{
										var newBox = new THREE.Box3().setFromObject(selectedObject);
										var newHeight = newBox.max.z - newBox.min.z;
										selectedObject.position.z = parseFloat(parseFloat(newHeight /2 + parseFloat(originalZ)).toFixed(2));
										}
									}
									else
									{
									selectedObject.scale.y = newScale;
									}

								// RELOCATING THE OBJECT TO THE ORIGINAL Y POSITION
								selectedObject.position.y = parseFloat(parseFloat(newDepth /2 + parseFloat(originalY)).toFixed(2));

								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// UPDATING THE VISUAL CONTROL
								controls2.update();

								// UPDATING THE TEXTBOXS VALUES
								updateTextBoxs();
								}
								else
								{
								// SETTING THE ORIGINAL ROTATION TO THE OBJECT
								selectedObject.rotation.x = originalRotationX;
								selectedObject.rotation.y = originalRotationY;
								selectedObject.rotation.z = originalRotationZ;

								// SETTING THE ORIGINAL VALUE
								document.getElementById("objectDepth").value = parseFloat(oldDepth);

								// ERROR MESSAGE
								alert(STRING_ERROR_POSITIVE);
								}
							}
							else
							{
							// SETTING THE ORIGINAL ROTATION TO THE OBJECT
							selectedObject.rotation.x = originalRotationX;
							selectedObject.rotation.y = originalRotationY;
							selectedObject.rotation.z = originalRotationZ;

							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectDepth").value = parseFloat(oldDepth);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectPositionX(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectPositionX").value;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT POSITION
							selectedObject.position.x = parseFloat(value);

							// SETTING THE VALUE
							document.getElementById("objectPositionX").value = parseFloat(value).toFixed(2);

							// UPDATING THE VISUAL CONTROL
							controls2.update();
							}
							else
							{
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectPositionX").value = parseFloat(selectedObject.position.x).toFixed(2);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectPositionY(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectPositionY").value;

						// GETTING THE OBJECT HEIGHT
						var box = new THREE.Box3().setFromObject(selectedObject);
						var height = box.max.z - box.min.z;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT POSITION
							selectedObject.position.z = parseFloat((height/2)+parseFloat(value));

							// UPDATING THE VISUAL CONTROL
							controls2.update();

							// UPDATING THE TEXTBOXS VALUES
							updateTextBoxs();
							}
							else
							{
							alert('');
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectPositionY").value = parseFloat(selectedObject.position.z - height / 2).toFixed(2);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectPositionZ(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectPositionZ").value;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT POSITION
							selectedObject.position.y = parseFloat(value);

							// SETTING THE VALUE
							document.getElementById("objectPositionZ").value = parseFloat(value).toFixed(2);

							// UPDATING THE VISUAL CONTROL
							controls2.update();
							}
							else
							{
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectPositionZ").value = parseFloat(selectedObject.position.y).toFixed(2);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectRotationX(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectRotationX").value;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT ROTATION
							selectedObject.rotation.x = (value * Math.PI)/180;

							// SETTING THE VALUE
							document.getElementById("objectRotationX").value = parseFloat(value);

							// UPDATING THE TEXTBOXS VALUES
							updateTextBoxs();
							}
							else
							{
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectRotationX").value = (selectedObject.rotation.x * 180 / Math.PI);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectRotationY(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectRotationY").value;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT ROTATION
							selectedObject.rotation.y = (value * Math.PI)/180;

							// SETTING THE VALUE
							document.getElementById("objectRotationY").value = parseFloat(value);

							// UPDATING THE TEXTBOXS VALUES
							updateTextBoxs();
							}
							else
							{
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectRotationY").value = (selectedObject.rotation.y * 180 / Math.PI);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function changeObjectRotationZ(e)
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					if (e.keyCode == 13 || e.keyCode == 9)
						{
						var value = document.getElementById("objectRotationZ").value;

						// CHECKING IF IS A DOUBLE
						if(isDouble(value)==true)
							{
							// GETTING A NUMBER WITH TWO DIGITS AFTER COMMA
							value = parseFloat(value);

							// SETTING THE OBJECT ROTATION
							selectedObject.rotation.z = (value * Math.PI)/180;

							// SETTING THE VALUE
							document.getElementById("objectRotationZ").value = parseFloat(value);

							// UPDATING THE TEXTBOXS VALUES
							updateTextBoxs();
							}
							else
							{
							// SETTING THE ORIGINAL VALUE
							document.getElementById("objectRotationZ").value = (selectedObject.rotation.z * 180 / Math.PI);

							// ERROR MESSAGE
							alert(STRING_ERROR_DOUBLE);
							}
						}
					}
				}

			function newProject()
				{
				// CHECKING IF THERE IS ANY OBJECTS IN THE PLATFORM
				if (objects.length>0)
					{
					// ASKING IF LOSE CHANGES
					var message = confirm(STRING_ERROR_LOSECHANGES);
					if (message == true)
						{
						// RESTARTING EVERYTHING
						init();

						// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
						if (controls2!=null)
							{
							controls2.detach();
							controls2.update();
							controls2.visible = false;
							selectedObject = null;
							}

						// DISABLING ALL THE TEXTBOXS AND BUTTONS
						objectPropertiesPanelEnabled(false);
						}
					}
					else
					{
					// RESTARTING EVERYTHING
					init();
					}
				}

			function exportToSTL()
				{
				// CHECKING IF THERE IS ANY OBJECTS IN THE PLATFORM
				if (objects.length>0)
					{
					// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
					if (controls2!=null)
						{
						controls2.detach();
						controls2.update();
						controls2.visible = false;
						selectedObject = null;
						}

					// DISABLING ALL THE TEXTBOXS AND BUTTONS
					objectPropertiesPanelEnabled(false);

					// SHOWING THE LOADING SPLASH
					document.getElementById("loading").style.display = "block";

					// LOADING THE SCRIPT 1 SECONDS LATER
					setTimeout(exportToSTLExecute, 1000);
					}
					else
					{
					// ERROR MESSAGE
					alert(STRING_ERROR_EMPTYWORKSPACE);
					}
				}

			function exportToSTLExecute()
				{
				// CREATING A SCENE THAT WILL HAVE ALL THE MODELS
				var sceneConverter = new THREE.Scene();

				// CREATING DEFAULT MATERIAL
				var material = new THREE.MeshNormalMaterial();

				// CREATING THE OBJECT THAT WILL HAVE ALL THE OBJECTS COMBINED
				var finalMeshCSG = null;

				// LOOPING FOR EVERY OBJECT THAT WILL BE CREATED AS ONE
				for (var i = 0; i < objects.length; i++)
					{
					var objectColorValue = String(objects[i].material.color.getHexString());

					// CHECKING IF IT IS NOT A HOLLOW OBJECT
					if (objectColorValue.indexOf("000000")==-1)
						{
						// CREATING AN OBJECT IN ORDER TO COMBINED IT WITH THE REST OF THE OBJECTS IN THE PLATFORM
						var newCSG = THREE.CSG.fromMesh(objects[i]);
							
						// IF THE OBJECT THAT WILL HAVE ALL THE COMBINED OBJECTS IS EMPTY, SETS THE FIRST OBJECT
						if (finalMeshCSG==null)
							{
							finalMeshCSG = newCSG;
							}
							else
							{
							// COMBINING THE OBJECT WITH THE OBJECT THAT CONTAINS ALL THE OBJECT COMBINED AT THE MOMENT
							finalMeshCSG = newCSG.union(finalMeshCSG);
							}
						}
					}

				// LOOPING FOR EVERY OBJECT THAT WILL SUBSTRACTING THE FINAL MODEL
				for (var i = 0; i < objects.length; i++)
					{
					var objectColorValue = String(objects[i].material.color.getHexString());

					// CHECKING IF IT IS A HOLLOW OBJECT
					if (objectColorValue.indexOf("000000")>-1)
						{
						// CREATING AN OBJECT IN ORDER TO SUBTRACT IT WITH THE REST OF THE OBJECTS IN THE PLATFORM
						var newCSG = THREE.CSG.fromMesh(objects[i]);

						// IF THE OBJECT THAT WILL HAVE ALL THE COMBINED OBJECTS IS NOT EMPTY, SUBTRACTS THE OBJECT
						if (finalMeshCSG!=null)
							{
							finalMeshCSG = finalMeshCSG.subtract(newCSG);
							}
						}
					}

				// CHECKING IF THE OBJECT THAT WILL HAVE ALL THE COMBINED OBJECTS IS NOT EMPTY
				if (finalMeshCSG!=null)
					{
					// CONVERTING THE OBJECT THAT WAS COMBINED AND/OR SUBSTRACTED TO A COMPATIBLE MODEL
					var newMesh = THREE.CSG.toMesh(finalMeshCSG,material);

					// ADDING THE MODEL TO THE SCENE
					sceneConverter.add(newMesh);
					}

				// EXPORTING THE SCENE AS A STL FILE
				var exporter = new THREE.STLBinaryExporter();
				var result = exporter.parse(sceneConverter);

				// FORCING SAVING AS FILE
				saveString(result, STRING_FILENAME + ".stl");

				// HIDING THE LOADING SPLASH
				document.getElementById("loading").style.display = "none";
				}

			function exportToScene()
				{
				// CHECKING IF THERE IS ANY OBJECTS IN THE PLATFORM
				if (objects.length>0)
					{
					// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
					if (controls2!=null)
						{
						controls2.detach();
						controls2.update();
						controls2.visible = false;
						selectedObject = null;
						}

					// DISABLING ALL THE TEXTBOXS AND BUTTONS
					objectPropertiesPanelEnabled(false);

					// SHOWING THE LOADING SPLASH
					document.getElementById("loading").style.display = "block";

					// LOADING THE SCRIPT 1 SECONDS LATER
					setTimeout(exportToSceneExecute, 1000);
					}
					else
					{
					// ERROR MESSAGE
					alert(STRING_ERROR_EMPTYWORKSPACE);
					}
				}

			function exportToSceneExecute()
				{
				// SETTING THE VARIABLE THAT WILL HAVE ALL THE MODELS IN ONE FILE
				var finalResult = "";

				// GENERATING AN ARRAY OF TEMPORARY SCENES WITH ONE MODEL IN EACH ESCENE
				for (var i = 0; i < objects.length; i++)
					{
					var tempScene = new THREE.Scene();

					// GETTING THE ORIGINAL ROTATION OF THE OBJECT
					var rotationX = objects[i].rotation.x;
					var rotationY = objects[i].rotation.y;
					var rotationZ = objects[i].rotation.z;

					// SETTING THE OBJECT ROTATION TO 0
					objects[i].rotation.x = 0;
					objects[i].rotation.y = 0;
					objects[i].rotation.z = 0;

					// ADDING THE OBJECT TO THE TEMPORARY SCENE
					tempScene.add(objects[i]);

					// GETTING THE OBJECT SIZE
					var box = new THREE.Box3().setFromObject(objects[i]);
					var height = box.max.z - box.min.z;
					var width = box.max.x - box.min.x;
					var depth = box.max.y - box.min.y;

					// LOADING ALL THE OBJECT PROPERTIES IN A VARIABLE
					var objectProperties = objects[i].material.color.getHexString() + "," +
										   width.toFixed(2) + "," +
										   height.toFixed(2) + "," +
										   depth.toFixed(2) + "," +
										   objects[i].position.x + "," +
										   objects[i].position.y + "," +
										   objects[i].position.z + "," +
										   rotationX + "," +
										   rotationY + "," +
										   rotationZ + "|";

					// EXPORTING THE SCENE AS A STL MODEL
					var exporter = new THREE.STLExporter();
					var objectData = exporter.parse(tempScene);

					// ADDING THE MODEL TO THE VARIABLE THAT WILL HAVE ALL THE MODELS IN ONE FILE
					if (finalResult=="")
						{
						finalResult = objectProperties + objectData + "3D_OBJECT_MAKER_SEPARATOR";
						}
						else
						{
						finalResult = finalResult + objectProperties + objectData + "3D_OBJECT_MAKER_SEPARATOR";
						}

					// SETTING THE ORIGINAL ROTATION TO THE OBJECT
					objects[i].rotation.x = rotationX;
					objects[i].rotation.y = rotationY;
					objects[i].rotation.z = rotationZ;
					}

				// ADDING THE GRID SIZE TO THE FINAL RESULT
				finalResult = gridSizeValue + "|" + finalResult;

				// FORCING SAVING AS FILE
				saveString(finalResult, STRING_FILENAME + ".scene");

				// RETURNING THE OBJECTS TO THE MAIN SCENE
				for (var i = 0; i < objects.length; i++)
					{
					scene.add(objects[i]);
					}

				// HIDING THE LOADING SPLASH
				document.getElementById("loading").style.display = "none";
				}

			function saveString(text, filename)
				{
				save(new Blob([text], {type:"text/plain"}), filename);
				}

			function save(blob, filename)
				{
				var link = document.createElement("a");
				link.style.display = "none";
				document.body.appendChild(link);
				link.href = URL.createObjectURL(blob);
				link.download = filename || "data.json";
				link.click();
				}

			function deleteObject()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					// ASKING IF WILL DELETE OBJECT
					var message = confirm(STRING_DELETE_WARNING);
					if (message == true)
						{
						// DELETING THE OBJECT FROM THE SCENE
						scene.remove(selectedObject);

						// DELETING THE OBJECT FROM THE OBJECTS ARRAY
						objects = objects.filter(function(item)
							{ 
							return item !== selectedObject
							})

						// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
						if (controls2!=null)
							{
							controls2.detach();
							controls2.update();
							controls2.visible = false;
							selectedObject = null;
							}

						// DISABLING ALL THE TEXTBOXS AND BUTTONS
						objectPropertiesPanelEnabled(false);
						}
					}
				}

			function duplicateObject()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					// GETTING THE ORIGINAL ROTATION OF THE OBJECT
					var originalRotationX = selectedObject.rotation.x;
					var originalRotationY = selectedObject.rotation.y;
					var originalRotationZ = selectedObject.rotation.z;

					// SETTING THE OBJECT ROTATION TO 0
					selectedObject.applyMatrix(new THREE.Matrix4().makeRotationX(0));
					selectedObject.applyMatrix(new THREE.Matrix4().makeRotationY(0));
					selectedObject.applyMatrix(new THREE.Matrix4().makeRotationZ(0));

					// DUPLICATING THE OBJECT
					var duplicated = selectedObject.clone();
					duplicated.traverse(function (child)
						{
						if (child instanceof THREE.Mesh)
							{
							child.material = child.material.clone();
							}
						});

					// SETTING THE ORIGINAL ROTATION TO THE OBJECT
					duplicated.rotation.x = originalRotationX;
					duplicated.rotation.y = originalRotationY;
					duplicated.rotation.z = originalRotationZ;

					// SETTING THE ORIGINAL ROTATION TO THE OBJECT
					selectedObject.rotation.x = originalRotationX;
					selectedObject.rotation.y = originalRotationY;
					selectedObject.rotation.z = originalRotationZ;

					// SETTING THE POSITION OF THE MODEL
					var box = new THREE.Box3().setFromObject(duplicated);
					var height = box.max.z - box.min.z;
					duplicated.position.x = 0;
					duplicated.position.y = 0;
					duplicated.position.z = height / 2;

					// ADDING THE DUPLICATED OBJECT TO THE SCENE
					scene.add(duplicated);
					objects.push(duplicated);

					// IF NO OBJECTS ARE SELECTED, HIDING THE VISUAL CONTROL
					if (controls2!=null)
						{
						controls2.detach();
						controls2.update();
						controls2.visible = false;
						selectedObject = null;
						}

					// DISABLING ALL THE TEXTBOXS AND BUTTONS
					objectPropertiesPanelEnabled(false);

					// ATTACHING THE DRAGGING CONTROL TO THE SELECTED OBJECT
					controls2.addEventListener("change",function ()
						{
						updateTextBoxs();
						});

					// SELECTING THE DUPLICATED OBJECT
					selectedObject = duplicated;
					controls2.attach(selectedObject);
					controls2.update();
					controls2.visible = true;

					// ENABLING ALL THE TEXTBOXS
					objectPropertiesPanelEnabled(true);

					// UPDATING THE TEXTBOXS VALUES
					updateTextBoxs();

					// UPDATING THE COLOR FIELD
					updateColorField();

					// UPDATING THE PROPORTIONAL VALUE
					updateProportional();
					}
				}

			function resetObjectScale()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					// GETTING THE ORIGINAL SIZE
					var box = new THREE.Box3().setFromObject(selectedObject);
					var oldWidth = box.max.x - box.min.x;
					var oldDepth = box.max.y - box.min.y;
					var oldHeight = box.max.z - box.min.z;

					// GETTING THE ORIGINAL POSITION
					var originalX = parseFloat(parseFloat(selectedObject.position.x).toFixed(2) - oldWidth / 2);
					var originalY = parseFloat(parseFloat(selectedObject.position.y).toFixed(2) - oldDepth / 2);
					var originalZ = parseFloat(parseFloat(selectedObject.position.z).toFixed(2) - oldHeight / 2);

					// SETTING THE INITIAL OBJECT SIZE
					selectedObject.scale.x = 1;
					selectedObject.scale.y = 1;
					selectedObject.scale.z = 1;

					// RELOCATING THE OBJECT TO THE ORIGINAL Z POSITION IF NO ROTATION
					if (selectedObject.rotation.x==0 && selectedObject.rotation.y==0)
						{
						var tempBox = new THREE.Box3().setFromObject(selectedObject);
						var newWidth = tempBox.max.x - tempBox.min.x;
						var newDepth = tempBox.max.y - tempBox.min.y;
						var newHeight = tempBox.max.z - tempBox.min.z;
						selectedObject.position.z = parseFloat(parseFloat(newHeight /2 + parseFloat(originalZ)).toFixed(2));
						selectedObject.position.x = parseFloat(parseFloat(newWidth /2 + parseFloat(originalX)).toFixed(2));
						selectedObject.position.y = parseFloat(parseFloat(newDepth /2 + parseFloat(originalY)).toFixed(2));
						}

					// UPDATING THE TEXTBOXS VALUES
					updateTextBoxs();

					// UPDATING THE VISUAL CONTROL
					controls2.update();

					// UPDATING THE PROPORTIONAL VALUE
					updateProportional();
					}
				}

			function changeControlTypeMove()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					controls2.setMode("translate");
					controls2.update();
					TYPE_CONTROL = TYPE_MOVE;
					document.getElementById("buttonMove").classList.add("menubar_button_move_selected");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_enabled");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_disabled");

					document.getElementById("buttonScale").classList.add("menubar_button_scale_enabled");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_disabled");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_selected");

					document.getElementById("buttonRotate").classList.add("menubar_button_rotate_enabled");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_disabled");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_selected");
					}
				}

			function changeControlTypeScale()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					controls2.setMode("scale");
					controls2.update();
					TYPE_CONTROL = TYPE_SCALE;
					document.getElementById("buttonScale").classList.add("menubar_button_scale_selected");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_enabled");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_disabled");

					document.getElementById("buttonMove").classList.add("menubar_button_move_enabled");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_disabled");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_selected");

					document.getElementById("buttonRotate").classList.add("menubar_button_rotate_enabled");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_disabled");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_selected");
					}
				}

			function changeControlTypeRotate()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					controls2.setMode("rotate");
					controls2.update();
					TYPE_CONTROL = TYPE_ROTATE;
					document.getElementById("buttonRotate").classList.add("menubar_button_rotate_selected");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_enabled");
					document.getElementById("buttonRotate").classList.remove("menubar_button_rotate_disabled");

					document.getElementById("buttonScale").classList.add("menubar_button_scale_enabled");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_disabled");
					document.getElementById("buttonScale").classList.remove("menubar_button_scale_selected");

					document.getElementById("buttonMove").classList.add("menubar_button_move_enabled");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_disabled");
					document.getElementById("buttonMove").classList.remove("menubar_button_move_selected");
					}
				}

			function checkProportional()
				{
				if (document.getElementById("objectProportional").checked==true)
					{
					resetObjectScale();
					}
				}

			function updateTextBoxs()
				{
				// CHECKING IF AN OBJECT WAS SELECTED
				if (selectedObject!=null)
					{
					var boxInitial = new THREE.Box3().setFromObject(selectedObject);
					var heightInitial = boxInitial.max.z - boxInitial.min.z;

					// GETTING THE ORIGINAL ROTATION OF THE OBJECT
					var originalRotationX = selectedObject.rotation.x;
					var originalRotationY = selectedObject.rotation.y;
					var originalRotationZ = selectedObject.rotation.z;

					// SETTING THE OBJECT ROTATION TO 0
					selectedObject.rotation.x = 0;
					selectedObject.rotation.y = 0;
					selectedObject.rotation.z = 0;

					// GETTING THE OBJECT SIZE
					var box = new THREE.Box3().setFromObject(selectedObject);
					var height = box.max.z - box.min.z;
					var width = box.max.x - box.min.x;
					var depth = box.max.y - box.min.y;

					// SETTING THE VALUES
					var n;
					var numlength;

					width = width.toFixed(10);
					height = height.toFixed(10);
					depth = depth.toFixed(10);

					n = String(width).indexOf(".");
					var widthValue = String(width).substr(0, n + 3);

					n = String(height).indexOf(".")
					var heightValue = String(height).substr(0, n + 3);

					n = String(depth).indexOf(".")
					var depthValue = String(depth).substr(0, n + 3);

					document.getElementById("objectWidth").value = widthValue;
					document.getElementById("objectHeight").value = heightValue;
					document.getElementById("objectDepth").value = depthValue;

					// SETTING ALL THE DIGITS AFTER TWO PLACES AFTER COMMA. IF THIS IS NOT DONE, THE PROPORTIONAL SCALING WILL NOT BE ACCURATE
					n = String(width).indexOf(".");
					var widthCommaValue = String(width).substr(n + 3, String(width).length);
					document.getElementById("objectWidthCommaResidualData").value = "0.00" + widthCommaValue;

					n = String(height).indexOf(".");
					var heightCommaValue = String(height).substr(n + 3, String(height).length);
					document.getElementById("objectHeightCommaResidualData").value = "0.00" + heightCommaValue;

					n = String(depth).indexOf(".");
					var depthCommaValue = String(depth).substr(n + 3, String(depth).length);
					document.getElementById("objectDepthCommaResidualData").value = "0.00" + depthCommaValue;

					// SETTING THE ORIGINAL ROTATION TO THE OBJECT
					selectedObject.rotation.x = originalRotationX;
					selectedObject.rotation.y = originalRotationY;
					selectedObject.rotation.z = originalRotationZ;

					// SETTING THE VALUES
					document.getElementById("objectPositionX").value = parseFloat(selectedObject.position.x).toFixed(2);
					var finalPositionY = parseFloat(parseFloat(selectedObject.position.z).toFixed(2) - heightInitial / 2);
					if (finalPositionY==0){finalPositionY = parseFloat(Math.abs(finalPositionY).toFixed(2));}
					var finalPositionYChecker = String(finalPositionY.toFixed(2)).substring(0,5);
					if (finalPositionYChecker=="-0.00")
						{
						document.getElementById("objectPositionY").value = "0.00";
						}
						else
						{
						document.getElementById("objectPositionY").value = finalPositionY.toFixed(2);
						}
					document.getElementById("objectPositionZ").value = parseFloat(selectedObject.position.y).toFixed(2);
					document.getElementById("objectRotationX").value = (selectedObject.rotation.x * 180 / Math.PI).toFixed(2);
					document.getElementById("objectRotationY").value = (selectedObject.rotation.y * 180 / Math.PI).toFixed(2);
					document.getElementById("objectRotationZ").value = (selectedObject.rotation.z * 180 / Math.PI).toFixed(2);
					}
				}

			function updateColorField()
				{
				// GETTING THE COLOR OF THE OBJECT
				var objectColorValue = String(selectedObject.material.color.getHexString());

				if (objectColorValue.indexOf("000000")>-1) // HOLLOW
					{
					document.getElementById("materialColor").selectedIndex = 0;
					}
				else if (objectColorValue.indexOf("ffffff")>-1) // SILVER
					{
					document.getElementById("materialColor").selectedIndex = 1;
					}
				else if (objectColorValue.indexOf("808080")>-1) // GRAY
					{
					document.getElementById("materialColor").selectedIndex = 2;
					}
				else if (objectColorValue.indexOf("00ffff")>-1) // AQUA
					{
					document.getElementById("materialColor").selectedIndex = 3;
					}
				else if (objectColorValue.indexOf("0000ff")>-1) // BLUE
					{
					document.getElementById("materialColor").selectedIndex = 4;
					}
				else if (objectColorValue.indexOf("4682b4")>-1) // NAVY BLUE
					{
					document.getElementById("materialColor").selectedIndex = 5;
					}
				else if (objectColorValue.indexOf("ff00ff")>-1) // FUCHSIA
					{
					document.getElementById("materialColor").selectedIndex = 6;
					}
				else if (objectColorValue.indexOf("008000")>-1) // GREEN
					{
					document.getElementById("materialColor").selectedIndex = 7;
					}
				else if (objectColorValue.indexOf("008080")>-1) // TEAL
					{
					document.getElementById("materialColor").selectedIndex = 8;
					}
				else if (objectColorValue.indexOf("93db70")>-1) // LIGHT GREEN
					{
					document.getElementById("materialColor").selectedIndex = 9;
					}
				else if (objectColorValue.indexOf("00ff00")>-1) // LIME
					{
					document.getElementById("materialColor").selectedIndex = 10;
					}
				else if (objectColorValue.indexOf("8b4513")>-1) // BROWN
					{
					document.getElementById("materialColor").selectedIndex = 11;
					}
				else if (objectColorValue.indexOf("808000")>-1) // OLIVE
					{
					document.getElementById("materialColor").selectedIndex = 12;
					}
				else if (objectColorValue.indexOf("800080")>-1) // PURPLE
					{
					document.getElementById("materialColor").selectedIndex = 13;
					}
				else if (objectColorValue.indexOf("ee82ee")>-1) // VIOLET
					{
					document.getElementById("materialColor").selectedIndex = 14;
					}
				else if (objectColorValue.indexOf("ff0000")>-1) // RED
					{
					document.getElementById("materialColor").selectedIndex = 15;
					}
				else if (objectColorValue.indexOf("ffff00")>-1) // YELLOW
					{
					document.getElementById("materialColor").selectedIndex = 16;
					}
				else if (objectColorValue.indexOf("ffd700")>-1) // GOLD
					{
					document.getElementById("materialColor").selectedIndex = 17;
					}
				else if (objectColorValue.indexOf("ffa500")>-1) // ORANGE
					{
					document.getElementById("materialColor").selectedIndex = 18;
					}
				else if (objectColorValue.indexOf("ffc0cb")>-1) // PINK
					{
					document.getElementById("materialColor").selectedIndex = 19;
					}
				else // SILVER
					{
					document.getElementById("materialColor").selectedIndex = 1;
					}
				}

			function updateProportional()
				{
				// SETTING PROPORTIONAL SCALING VALUE
				if (selectedObject.scale.x == selectedObject.scale.y && selectedObject.scale.x == selectedObject.scale.z)
					{
					document.getElementById("objectProportional").checked = true;
					}
					else
					{
					document.getElementById("objectProportional").checked = false;
					}
				}

			init();
		</script>
	</body>
</html>